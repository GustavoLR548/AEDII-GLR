Na ciência da computação, um deslocamento lógico é uma operação bit a bit que desloca todos os bits de seu operando. As duas variantes de base são o deslocamento lógico à esquerda e o deslocamento lógico à direita. Isto é ainda modulado pelo número de posições de bit que um dado valor deve ser deslocado, como shift left por 1 ou shift right por n. Ao contrário de uma mudança aritmética, uma mudança lógica não preserva o bit de sinal de um número ou distingue o expoente de um número de seu significand (mantissa); cada bit no operando é simplesmente movido um determinado número de posições de bit, e as posições de bit vazias são preenchidas, geralmente com zeros e possivelmente com as mesmas (contraste com um deslocamento circular).

C

<< (left shift) Takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift. Or in other words left shifting an integer “x” with an integer “y” (x<<y) is equivalent to multiplying x with 2^y (2 raise to power y). 

>> (right shift) Takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift.Similarly right shifting (x>>y) is equivalent to dividing x with 2^y. 

Java

Java supports two type of right shift operator. The>> operator is a signed right shift operator and >>> is an unsigned right shift operator. The left operands value is moved right by the number of bits specified by the right operand.

The signed right shift operator '>>' uses the sign bit to fill the trailing positions. For example, if the number is positive then 0 will be used to fill the trailing positions and if the number is negative then 1 will be used to fill the trailing positions.

The unsigned right shift operator '>>' do not use the sign bit to fill the trailing positions. It always fills the trailing positions by 0s.
